#Polymorphism
METHOD OVERLOADING
class Test():
    def Marks(self):
        print("Topper")
    def Marks(self,value):
        print("Topper")

s=Test()
s.Marks(100)

#OPERATOR OVERLOADING
class Book:
    def __init__(self,pages):
        self.pages=pages

    def __add__(self,yours):
        self.yours=yours
        total=self.pages +yours.pages
        return Book(total)
    def __mul__(self,yours):
        self.yours=yours
        return self.pages * yours.pages

    def __str__(self):
        return str(self.pages)
b1=Book(100)
b2=Book(200)
b3=Book(40)
b4=Book(50)
# b=b1+b2
# bx=b3+b4
by=b1+b2+b3+b4
print(by)
print(b1*b2)

#EXAMPLE-2
class Employee:
    def __init__(self,name,salary):
        self.name=name
        self.salary=salary

    def __mul__(self,other):
        return self.salary*other.days
class Timestamp:
    def __init__(self,name,days):
        self.name=name
        self.days=days
    def __mul__(self,other):
        return self.days*other.salary
    
e=Employee('durga',50)
t=Timestamp('danny',40)
print("salary",e*t)
print("salary",t*e)

#CONSTRUCTOR OVERLOADING
class Test:
    def __init__(self):
        print('no-arg')
    def __init__(self,a):
        print("one-arg")
    def __init__(self,a,b):
        print("two-arg")
t=Test(2,6)



#METHOD OVERRIDING
class Parent:
    def property(self):
        print("Gold+Cash+Land")
    def marraige(self):
        print("kamala|seetha")
# class Child(Parent):
#     pass
class Child(Parent):
    def marraige(self):
        #super().marraige()
        print("Amala|soundharya")
c=Child()
c.property()
c.marraige()

#CONSTRUCTOR OVERRIDING
class Parent:
    def __init__(self):
        print('parent constructor')
class Children(Parent):
    def __init__(self):
        print('child constructor')
c=Children()

